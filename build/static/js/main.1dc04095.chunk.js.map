{"version":3,"sources":["utils/class-names/index.js","utils/duration/index.js","pomodoro/Controls.js","pomodoro/Play.js","pomodoro/Timer.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["classNames","classNameToBoolean","Object","entries","reduce","classes","className","value","concat","undefined","filter","join","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Controls","focusTime","setFocusTime","breakTime","setBreakTime","setRemainingTime","controlsDisabled","data-testid","type","onClick","prevTime","max","disabled","min","Play","playPause","isTimerRunning","handleReset","stopDisabled","role","aria-label","title","oi","Timer","remainingTime","currentState","isStopped","paused","currentTimer","percent","givenSeconds","seconds","round","secondsToDuration","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","Pomodoro","useState","setIsTimerRunning","setIsStopped","setControlsDisabled","setStopDisabled","setCurrentState","myAudio","useRef","alarm","Audio","process","callback","delay","savedCallback","useEffect","current","id","setInterval","clearInterval","useInterval","play","prevState","ref","src","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1dc04095.chunk.js","sourcesContent":["/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from 'react'\nimport { minutesToDuration } from '../utils/duration'\nimport { PropTypes } from 'prop-types'\n\nexport default function Controls({\n  focusTime,\n  setFocusTime,\n  breakTime,\n  setBreakTime,\n  setRemainingTime,\n  controlsDisabled,\n}) {\n  // Create handlers for each state\n\n  const decreaseFocusTime = () => {\n    setFocusTime((prevTime) => Math.max(5, prevTime - 5))\n    setRemainingTime((prevTime) => Math.max(300, prevTime - 5 * 60))\n  }\n  const increaseFocusTime = () => {\n    setFocusTime((prevTime) => Math.min(60, prevTime + 5))\n    setRemainingTime((prevTime) => Math.min(3600, prevTime + 5 * 60))\n  }\n  const decreaseBreakTime = () => {\n    setBreakTime((prevTime) => Math.max(1, prevTime - 1))\n  }\n  const increaseBreakTime = () => {\n    setBreakTime((prevTime) => Math.min(15, prevTime + 1))\n  }\n\n  return (\n    <div className='row'>\n      <div className='col'>\n        <div className='input-group input-group-lg mb-2'>\n          <span className='input-group-text' data-testid='duration-focus'>\n            Focus Duration: {minutesToDuration(focusTime)}\n          </span>\n          <div className='input-group-append'>\n            <button\n              type='button'\n              className='btn btn-secondary'\n              data-testid='decrease-focus'\n              onClick={decreaseFocusTime}\n              disabled={controlsDisabled}\n            >\n              <span className='oi oi-minus' />\n            </button>\n\n            <button\n              type='button'\n              className='btn btn-secondary'\n              data-testid='increase-focus'\n              onClick={increaseFocusTime}\n              disabled={controlsDisabled}\n            >\n              <span className='oi oi-plus' />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className='col'>\n        <div className='float-right'>\n          <div className='input-group input-group-lg mb-2'>\n            <span className='input-group-text' data-testid='duration-break'>\n              Break Duration: {minutesToDuration(breakTime)}\n            </span>\n            <div className='input-group-append'>\n              <button\n                type='button'\n                className='btn btn-secondary'\n                data-testid='decrease-break'\n                onClick={decreaseBreakTime}\n                disabled={controlsDisabled}\n              >\n                <span className='oi oi-minus' />\n              </button>\n\n              <button\n                type='button'\n                className='btn btn-secondary'\n                data-testid='increase-break'\n                onClick={increaseBreakTime}\n                disabled={controlsDisabled}\n              >\n                <span className='oi oi-plus' />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nControls.propTypes = {\n  focusTime: PropTypes.number.isRequired,\n  setFocusTime: PropTypes.func.isRequired,\n  breakTime: PropTypes.number.isRequired,\n  setBreakTime: PropTypes.func.isRequired,\n  setRemainingTime: PropTypes.func.isRequired,\n  controlsDisabled: PropTypes.bool.isRequired,\n}\n","import React from 'react'\nimport { PropTypes } from 'prop-types'\n\nexport default function Play({\n  playPause,\n  classNames,\n  isTimerRunning,\n  handleReset,\n  stopDisabled,\n}) {\n  return (\n    <div className='row'>\n      <div className='col'>\n        <div\n          className='btn-group btn-group-lg mb-2'\n          role='group'\n          aria-label='Timer controls'\n        >\n          <button\n            type='button'\n            className='btn btn-primary'\n            data-testid='play-pause'\n            title='Start or pause timer'\n            onClick={playPause}\n          >\n            <span\n              className={classNames({\n                oi: true,\n                'oi-media-play': !isTimerRunning,\n                'oi-media-pause': isTimerRunning,\n              })}\n            />\n          </button>\n          <button\n            type='button'\n            className='btn btn-secondary'\n            title='Stop the session'\n            onClick={handleReset}\n            disabled={stopDisabled}\n          >\n            <span className='oi oi-media-stop' />\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nPlay.propTypes = {\n  playPause: PropTypes.func.isRequired,\n  classNames: PropTypes.func.isRequired,\n  isTimerRunning: PropTypes.bool.isRequired,\n  handleReset: PropTypes.func.isRequired,\n  stopDisabled: PropTypes.bool.isRequired,\n}\n","import React from 'react'\nimport { minutesToDuration, secondsToDuration } from '../utils/duration'\nimport { PropTypes } from 'prop-types'\n\nexport default function Timer({\n  focusTime,\n  breakTime,\n  remainingTime,\n  currentState,\n  isStopped,\n  isTimerRunning,\n}) {\n  const paused = isTimerRunning ? '' : 'PAUSED'\n\n  const currentTimer = currentState === 'Focusing' ? focusTime : breakTime\n  const percent =\n    ((currentTimer * 60 - remainingTime) / (currentTimer * 60)) * 100\n  if (!isStopped) {\n    return (\n      <>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className='row mb-2'>\n          <div className='col'>\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid='session-title'>\n              {currentState} for {minutesToDuration(currentTimer)} minutes\n            </h2>\n\n            <p className='lead' data-testid='session-sub-title'>\n              {secondsToDuration(remainingTime)} remaining\n            </p>\n          </div>\n        </div>\n        <h2>{paused}</h2>\n        <div className='row mb-2'>\n          <div className='col'>\n            <div className='progress' style={{ height: '20px' }}>\n              <div\n                className='progress-bar'\n                role='progressbar'\n                aria-valuemin='0'\n                aria-valuemax='100'\n                aria-valuenow={percent} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${percent}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  } else {\n    return null\n  }\n}\n\nTimer.propTypes = {\n  focusTime: PropTypes.number.isRequired,\n  breakTime: PropTypes.number.isRequired,\n  remainingTime: PropTypes.number.isRequired,\n  currentState: PropTypes.string.isRequired,\n  isStopped: PropTypes.bool.isRequired,\n  isTimerRunning: PropTypes.bool.isRequired,\n}\n","import React, { useState, useRef } from 'react'\nimport classNames from '../utils/class-names'\nimport useInterval from '../utils/useInterval'\nimport Controls from './Controls'\nimport Play from './Play'\nimport Timer from './Timer'\n\nfunction Pomodoro() {\n  const [focusTime, setFocusTime] = useState(25)\n  const [breakTime, setBreakTime] = useState(5)\n  const [remainingTime, setRemainingTime] = useState(1500)\n  const [isTimerRunning, setIsTimerRunning] = useState(false)\n  const [isStopped, setIsStopped] = useState(true)\n  const [controlsDisabled, setControlsDisabled] = useState(false)\n  const [stopDisabled, setStopDisabled] = useState(true)\n  const [currentState, setCurrentState] = useState('Focusing')\n  const myAudio = useRef()\n  const alarm = new Audio(`${process.env.PUBLIC_URL}/alarm/moogle.mp3`)\n\n  useInterval(\n    () => {\n      setRemainingTime(remainingTime - 1)\n      if (remainingTime <= 0) {\n        alarm.play()\n        if (currentState === 'Focusing') {\n          setCurrentState('On Break')\n          setRemainingTime(breakTime * 60)\n        } else if (currentState === 'On Break') {\n          setCurrentState('Focusing')\n          setRemainingTime(focusTime * 60)\n        }\n      }\n    },\n    isTimerRunning ? 1000 : null\n  )\n\n  const playPause = () => {\n    setIsTimerRunning((prevState) => !prevState)\n    setIsStopped(false)\n    setControlsDisabled(true)\n    setStopDisabled(false)\n  }\n\n  const handleReset = () => {\n    setFocusTime(25)\n    setBreakTime(5)\n    setRemainingTime(1500)\n    setCurrentState('Focusing')\n    setIsTimerRunning(false)\n    setIsStopped(true)\n    setControlsDisabled(false)\n    setStopDisabled(true)\n  }\n\n  return (\n    <div className='pomodoro'>\n      <Controls\n        focusTime={focusTime}\n        setFocusTime={setFocusTime}\n        breakTime={breakTime}\n        setBreakTime={setBreakTime}\n        setRemainingTime={setRemainingTime}\n        controlsDisabled={controlsDisabled}\n      />\n      <Play\n        playPause={playPause}\n        classNames={classNames}\n        isTimerRunning={isTimerRunning}\n        handleReset={handleReset}\n        stopDisabled={stopDisabled}\n      />\n      <Timer\n        focusTime={focusTime}\n        breakTime={breakTime}\n        remainingTime={remainingTime}\n        currentState={currentState}\n        isStopped={isStopped}\n        isTimerRunning={isTimerRunning}\n      />\n      <audio id='alarm' ref={myAudio} src={alarm} type='audio/mp3'></audio>\n    </div>\n  )\n}\n\nexport default Pomodoro\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}